input {
  beats {
    port => 5044
  }
  tcp {
    port => 5000  # This is internal; inside the container it's still 5000, but mapped to 5001 on the host
    codec => json
  }
  udp {
    port => 5000  # This is internal; inside the container it's still 5000, but mapped to 5002 on the host
    codec => json
  }
}

filter {
  if [container][name] =~ /chatbot/ or [container][labels][com.docker.compose.service] =~ /chatbot/ {
    # Tag it as a chatbot log
    mutate {
      add_tag => ["chatbot"]
    }
    
    # Try to parse log message for specific patterns
    grok {
      match => { "message" => "ERROR%{SPACE}in%{SPACE}%{WORD:function_name}:%{SPACE}%{GREEDYDATA:error_message}" }
      tag_on_failure => ["_grokparsefailure", "chatbot_error_parse_failure"]
    }
    
    # Look for specific health status info
    if [message] =~ "health_status" {
      mutate {
        add_tag => ["health_check"]
      }
    }
    
    # Try to identify log level
    if [message] =~ /ERROR/ {
      mutate {
        add_field => { "log_level" => "ERROR" }
      }
    } else if [message] =~ /WARNING/ {
      mutate {
        add_field => { "log_level" => "WARNING" }
      }
    } else if [message] =~ /INFO/ {
      mutate {
        add_field => { "log_level" => "INFO" }
      }
    } else {
      mutate {
        add_field => { "log_level" => "DEBUG" }
      }
    }
  }
  
  # Add timestamp for all logs
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    remove_field => [ "timestamp" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "chatbot-logs-%{+YYYY.MM.dd}"
  }
  # For debugging only - uncomment to see logs in console
  # stdout { codec => rubydebug }
} 